{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../sources/client/connection.ts"],"names":[],"mappings":"AAYA,MAAM,UAAU,GAAG,IAAI,SAAS,CAAE,qBAAqB,CAAE,CAAC;AAO1D,SAAS,cAAc,CAAE,QAAyB;IAEjD,UAAU,CAAC,gBAAgB,CAC1B,SAAS,EACT,CAAE,KAAK,EAAG,EAAE;QAEX,QAAQ,CAAE,WAAW,EAAE,KAAK,CAAC,IAAI,CAAE,CAAC;IACrC,CAAC,CACD,CAAC;AACH,CAAC;AAOD,SAAS,WAAW,CAAE,OAAyB;IAE9C,UAAU,CAAC,IAAI,CAAE,IAAI,CAAC,SAAS,CAAE,OAAO,CAAE,CAAE,CAAC;AAC9C,CAAC;AAED,OAAO,EACN,UAAU,EACV,cAAc,EACd,WAAW,GACX,CAAC","sourcesContent":["import type {\n\tAnyClientMessage,\n} from '../common/messages.js';\n\n/**\n * Слушатель сообщений от сервера\n */\ntype MessageListener = ( sendMessageFunction: typeof sendMessage, data: unknown ) => void;\n\n/**\n * Соединение по WebSocket\n */\nconst connection = new WebSocket( 'ws://localhost:8000' );\n\n/**\n * Добавляет слушатель сообщений по WebSocket\n * \n * @param listener Функция для обработки сообщений\n */\nfunction listenMessages( listener: MessageListener ): void\n{\n\tconnection.addEventListener(\n\t\t'message',\n\t\t( event ) =>\n\t\t{\n\t\t\tlistener( sendMessage, event.data );\n\t\t},\n\t);\n}\n\n/**\n * Отправляет сообщение на сервер\n * \n * @param message Сообщение, отправляемое на сервер\n */\nfunction sendMessage( message: AnyClientMessage ): void\n{\n\tconnection.send( JSON.stringify( message ) );\n}\n\nexport {\n\tconnection,\n\tlistenMessages,\n\tsendMessage,\n};\n\nexport type {\n\tMessageListener,\n};\n"]}