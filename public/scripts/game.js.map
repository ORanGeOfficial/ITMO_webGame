{"version":3,"file":"game.js","sourceRoot":"","sources":["../../sources/client/game.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,KAAK,UAAU,MAAM,mBAAmB,CAAC;AAChD,OAAO,KAAK,YAAY,MAAM,qBAAqB,CAAC;AAGpD,UAAU,CAAC,cAAc,CAAE,WAAW,CAAE,CAAC;AACzC,YAAY,CAAC,iBAAiB,CAAE,cAAc,CAAE,CAAC;AAKjD,IAAI,WAA2D,CAAC;AAOhE,SAAS,cAAc,CAAE,mBAAuC;IAE/D,WAAW,GAAG,mBAAmB,CAAC;AACnC,CAAC;AAOD,SAAS,WAAW,CAAE,IAAiB;IAEtC,WAAW,CAAE;QACZ,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,IAAI;KACV,CAAE,CAAC;AACL,CAAC;AAKD,SAAS,cAAc;IAEtB,WAAW,CAAE;QACZ,IAAI,EAAE,YAAY;KAClB,CAAE,CAAC;AACL,CAAC;AAKD,SAAS,SAAS;IAEjB,UAAU,CAAE,MAAM,CAAE,CAAC;AACtB,CAAC;AASD,SAAS,YAAY,CAAE,MAAe,EAAE,KAA2B,EAAE,KAAY;IAEhF,UAAU,CAAC,MAAM,CAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAE,CAAC;AAC3C,CAAC;AAOD,SAAS,OAAO,CAAE,MAAiC;IAElD,YAAY,CAAC,MAAM,CAAE,MAAM,CAAE,CAAC;IAC9B,UAAU,CAAE,QAAQ,CAAE,CAAC;AACxB,CAAC;AAED,OAAO,EACN,SAAS,EACT,YAAY,EACZ,OAAO,EACP,cAAc,GACd,CAAC","sourcesContent":["import { openScreen } from './screens.js';\nimport * as GameScreen from './screens/game.js';\nimport * as ResultScreen from './screens/result.js';\nimport { PlayerState, Color } from '../common/messages';\n\nGameScreen.setTurnHandler( turnHandler );\nResultScreen.setRestartHandler( restartHandler );\n\n/**\n * Отправляет сообщение на сервер\n */\nlet sendMessage: typeof import( './connection.js' ).sendMessage;\n\n/**\n * Устанавливает функцию отправки сообщений на сервер\n * \n * @param sendMessageFunction Функция отправки сообщений\n */\nfunction setSendMessage( sendMessageFunction: typeof sendMessage ): void\n{\n\tsendMessage = sendMessageFunction;\n}\n\n/**\n * Обрабатывает ход игрока\n * \n * @param move Загаданное пользователем число\n */\nfunction turnHandler( move: PlayerState ): void\n{\n\tsendMessage( {\n\t\ttype: 'playerMove',\n\t\tmove: move,\n\t} );\n}\n\n/**\n * Обрабатывает перезапуск игры\n */\nfunction restartHandler(): void\n{\n\tsendMessage( {\n\t\ttype: 'repeatGame',\n\t} );\n}\n\n/**\n * Начинает игру\n */\nfunction startGame(): void\n{\n\topenScreen( 'game' );\n}\n\n/**\n * Меняет активного игрока\n * \n * @param myTurn Ход текущего игрока?\n * @param field\n * @param color\n */\nfunction changePlayer( myTurn: boolean, field: Array<Array<string>>, color: Color ): void\n{\n\tGameScreen.update( myTurn, field, color );\n}\n\n/**\n * Завершает игру\n * \n * @param result Результат игры\n */\nfunction endGame( result: 'win' | 'loose' | 'abort' ): void\n{\n\tResultScreen.update( result );\n\topenScreen( 'result' );\n}\n\nexport {\n\tstartGame,\n\tchangePlayer,\n\tendGame,\n\tsetSendMessage,\n};\n"]}